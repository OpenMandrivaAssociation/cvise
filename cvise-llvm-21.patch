diff -up cvise-master/clang_delta/CommonRenameClassRewriteVisitor.h.omv~ cvise-master/clang_delta/CommonRenameClassRewriteVisitor.h
--- cvise-master/clang_delta/CommonRenameClassRewriteVisitor.h.omv~	2025-07-20 22:45:31.904598015 +0200
+++ cvise-master/clang_delta/CommonRenameClassRewriteVisitor.h	2025-07-20 22:45:49.007428801 +0200
@@ -368,7 +368,7 @@ template<typename T> bool CommonRenameCl
     dyn_cast<DependentTemplateSpecializationType>(Ty);
   TransAssert(DTST && "Bad DependentTemplateSpecializationType!");
 
-  const IdentifierInfo *IdInfo = DTST->getIdentifier();
+  const IdentifierInfo *IdInfo = DTST->getDependentTemplateName().getName().getIdentifier();
   std::string IdName = IdInfo->getName().str();
   std::string Name;
   if (getNewNameByName(IdName, Name)) {
diff -up cvise-master/clang_delta/RemoveNamespace.cpp.omv~ cvise-master/clang_delta/RemoveNamespace.cpp
--- cvise-master/clang_delta/RemoveNamespace.cpp.omv~	2025-07-20 22:40:25.186358223 +0200
+++ cvise-master/clang_delta/RemoveNamespace.cpp	2025-07-20 22:57:24.886757229 +0200
@@ -440,7 +440,7 @@ bool RemoveNamespaceRewriteVisitor::Visi
     dyn_cast<DependentTemplateSpecializationType>(Ty);
   TransAssert(DTST && "Bad DependentTemplateSpecializationType!");
 
-  const IdentifierInfo *IdInfo = DTST->getIdentifier();
+  const IdentifierInfo *IdInfo = DTST->getDependentTemplateName().getName().getIdentifier();
   std::string IdName = IdInfo->getName().str();
   std::string Name;
 
@@ -563,7 +563,6 @@ bool RemoveNamespaceRewriteVisitor::Trav
         break;
       }
       case NestedNameSpecifier::TypeSpec: // Fall-through
-      case NestedNameSpecifier::TypeSpecWithTemplate:
         TraverseTypeLoc(Loc.getTypeLoc());
         break;
       default:
diff -up cvise-master/clang_delta/RemoveUnusedFunction.cpp.omv~ cvise-master/clang_delta/RemoveUnusedFunction.cpp
--- cvise-master/clang_delta/RemoveUnusedFunction.cpp.omv~	2025-07-20 22:57:49.008792866 +0200
+++ cvise-master/clang_delta/RemoveUnusedFunction.cpp	2025-07-20 22:58:09.503872164 +0200
@@ -254,7 +254,7 @@ bool RUFAnalysisVisitor::VisitFunctionDe
 
   if (FD->isReferenced() ||
       FD->isMain() ||
-      FD->hasAttr<OpenCLKernelAttr>() ||
+      DeviceKernelAttr::isOpenCLSpelling(FD->getAttr<DeviceKernelAttr>()) ||
       ConsumerInstance->hasReferencedSpecialization(CanonicalFD) ||
       ConsumerInstance->isInlinedSystemFunction(CanonicalFD) ||
       ConsumerInstance->isInReferencedSet(CanonicalFD) ||
diff -up cvise-master/clang_delta/RenameFun.cpp.omv~ cvise-master/clang_delta/RenameFun.cpp
--- cvise-master/clang_delta/RenameFun.cpp.omv~	2025-07-20 22:56:07.345421458 +0200
+++ cvise-master/clang_delta/RenameFun.cpp	2025-07-20 22:56:56.769565862 +0200
@@ -261,7 +261,7 @@ void RenameFun::addFun(const FunctionDec
 {
   std::string Name = FD->getNameAsString();
   // Skip special functions
-  if (isSpecialFun(Name) || FD->hasAttr<OpenCLKernelAttr>())
+  if (isSpecialFun(Name) || DeviceKernelAttr::isOpenCLSpelling(FD->getAttr<DeviceKernelAttr>()))
     FunToNameMap[FD] = Name;
 
   if (FunToNameMap.find(FD) != FunToNameMap.end())
diff -up cvise-master/clang_delta/Transformation.cpp.omv~ cvise-master/clang_delta/Transformation.cpp
--- cvise-master/clang_delta/Transformation.cpp.omv~	2025-07-20 22:53:54.681254000 +0200
+++ cvise-master/clang_delta/Transformation.cpp	2025-07-20 22:54:36.103989394 +0200
@@ -674,8 +674,7 @@ const DeclContext *Transformation::getDe
         const NamespaceAliasDecl *NAD = NNS->getAsNamespaceAlias();
         return NAD->getNamespace()->getCanonicalDecl();
       }
-      case NestedNameSpecifier::TypeSpec: // Fall-through
-      case NestedNameSpecifier::TypeSpecWithTemplate: {
+      case NestedNameSpecifier::TypeSpec: { // Fall-through
         const Type *Ty = NNS->getAsType();
         if (const RecordType *RT = Ty->getAs<RecordType>())
           return RT->getDecl();
diff -up cvise-master/clang_delta/TransformationManager.cpp.omv~ cvise-master/clang_delta/TransformationManager.cpp
--- cvise-master/clang_delta/TransformationManager.cpp.omv~	2025-07-20 22:47:27.526666578 +0200
+++ cvise-master/clang_delta/TransformationManager.cpp	2025-07-20 22:52:48.185320625 +0200
@@ -163,7 +163,7 @@ bool TransformationManager::initializeCo
     ClangInstance->createFileManager();
 
     if(CLCPath != NULL && ClangInstance->hasFileManager() &&
-       ClangInstance->getFileManager().getDirectory(CLCPath, false)) {
+       ClangInstance->getFileManager().getOptionalDirectoryRef(CLCPath, false)) {
         Args.push_back("-I");
         Args.push_back(CLCPath);
     }
@@ -186,7 +186,7 @@ bool TransformationManager::initializeCo
 
   TargetInfo *Target = 
     TargetInfo::CreateTargetInfo(ClangInstance->getDiagnostics(),
-                                 ClangInstance->getInvocation().TargetOpts);
+                                 ClangInstance->getInvocation().getTargetOpts());
   ClangInstance->setTarget(Target);
 
   if (const char *env = getenv("CVISE_INCLUDE_PATH")) {
